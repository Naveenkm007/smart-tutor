import React, { useState, useRef, useEffect } from 'react';
import './voice-website-builder.css';

export default function VoiceWebsiteBuilder() {
  const [isRecording, setIsRecording] = useState(false);
  const [transcription, setTranscription] = useState('');
  const [generatedCode, setGeneratedCode] = useState('');
  const [status, setStatus] = useState('Ready to start');
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('preview');
  const [manualText, setManualText] = useState('');
  
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const previewFrameRef = useRef(null);

  // Update preview when generatedCode changes
  useEffect(() => {
    if (generatedCode) {
      console.log('Generated code updated, triggering preview. Code length:', generatedCode.length);
      console.log('First 200 chars:', generatedCode.substring(0, 200));
      setTimeout(() => updatePreview(generatedCode), 100);
    }
  }, [generatedCode]);

  // Generate website using Google AI
  const generateWithAI = async (description) => {
    try {
      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=' + process.env.GOOGLE_AI_API_KEY, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `You are a web development expert. Create a complete, modern website based on this description: ${description}

Rules:
1. Return ONLY a complete HTML file with embedded CSS and JavaScript
2. Use modern design principles and a clean layout
3. Make it fully responsive for all devices
4. Include all necessary styles in <style> tag
5. Include all JavaScript in <script> tag
6. Use semantic HTML5 elements
7. Add smooth animations and transitions
8. Ensure the code is complete and ready to run
9. Include proper meta tags and viewport settings
10. Use modern CSS features like Flexbox or Grid
11. Add comments in the code for better understanding
12. Ensure all interactive elements work properly
13. Include a header with navigation
14. Add a footer with contact information
15. Make sure all sections are properly styled and responsive
16. Use beautiful color schemes and typography
17. Add hover effects and micro-interactions
18. Include placeholder content that matches the theme
19. Ensure accessibility with proper ARIA labels
20. Use CSS custom properties for consistent theming

Return ONLY the HTML code, no explanation or markdown formatting.`
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`AI API error: ${response.status}`);
      }

      const data = await response.json();
      const generatedContent = data.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (!generatedContent) {
        throw new Error('No content generated by AI');
      }

      // Clean up the response to ensure it's just HTML
      let cleanedHTML = generatedContent.trim();
      if (cleanedHTML.startsWith('```html')) {
        cleanedHTML = cleanedHTML.replace(/```html\n?/, '').replace(/\n?```$/, '');
      }
      if (cleanedHTML.startsWith('```')) {
        cleanedHTML = cleanedHTML.replace(/```\n?/, '').replace(/\n?```$/, '');
      }

      return cleanedHTML;
    } catch (error) {
      console.error('AI generation error:', error);
      // Fallback to local generation if AI fails
      return generateLocalHTML(description);
    }
  };

  // Generate local HTML for development mode
  const generateLocalHTML = (description) => {
    const sanitizedTitle = description.substring(0, 50).replace(/[^a-zA-Z0-9\s]/g, '');
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${sanitizedTitle || 'Generated Website'}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 0;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #764ba2;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 2rem;
        }
        
        .nav-links a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
            transition: color 0.3s ease;
        }
        
        .nav-links a:hover {
            color: #667eea;
        }
        
        main {
            padding: 4rem 0;
        }
        
        .hero {
            text-align: center;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 4rem 2rem;
            border-radius: 20px;
            margin-bottom: 4rem;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        
        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .hero p {
            font-size: 1.2rem;
            color: #666;
            max-width: 600px;
            margin: 0 auto 2rem;
        }
        
        .btn {
            display: inline-block;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 30px;
            text-decoration: none;
            border-radius: 25px;
            font-weight: 600;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 4rem;
        }
        
        .feature-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
        }
        
        .feature-card h3 {
            color: #764ba2;
            margin-bottom: 1rem;
        }
        
        footer {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            text-align: center;
            padding: 2rem 0;
            margin-top: 4rem;
        }
        
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2rem;
            }
            
            .nav-links {
                display: none;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <div class="logo">Generated Site</div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>
    
    <main class="container">
        <section class="hero">
            <h1>Welcome to Your Website</h1>
            <p>Based on your description: "${description}"</p>
            <a href="#" class="btn">Get Started</a>
        </section>
        
        <section class="features">
            <div class="feature-card">
                <h3>🎨 Modern Design</h3>
                <p>Beautiful, responsive design that looks great on all devices with smooth animations and modern UI elements.</p>
            </div>
            <div class="feature-card">
                <h3>⚡ Fast Performance</h3>
                <p>Optimized for speed and performance with clean, efficient code and best practices implementation.</p>
            </div>
            <div class="feature-card">
                <h3>📱 Mobile First</h3>
                <p>Fully responsive design that provides an excellent user experience across all screen sizes and devices.</p>
            </div>
        </section>
    </main>
    
    <footer>
        <div class="container">
            <p>&copy; 2025 Generated Website. Created with Voice-to-Website Builder.</p>
        </div>
    </footer>
    
    <script>
        // Add smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth'
                    });
                }
            });
        });
        
        // Add loading animation
        window.addEventListener('load', function() {
            document.body.style.opacity = '0';
            document.body.style.transition = 'opacity 0.5s ease';
            setTimeout(() => {
                document.body.style.opacity = '1';
            }, 100);
        });
    </script>
</body>
</html>`;
  };

  // Start recording
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          sampleRate: 48000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true
        }
      });
      
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });
      
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm;codecs=opus' });
        await processAudio(audioBlob);
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.start(1000); // Collect data every second
      setIsRecording(true);
      setStatus('Recording... Click stop when finished');
    } catch (error) {
      console.error('Error starting recording:', error);
      setStatus('Error: Could not access microphone');
    }
  };

  // Stop recording
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setStatus('Processing audio...');
      setLoading(true);
    }
  };

  // Process audio and generate website
  const processAudio = async (audioBlob) => {
    try {
      // Development fallback for voice as well
      setStatus('Voice processing not available in development mode. Please use text input instead.');
      setLoading(false);
      return;
      
      // This code will be used when APIs are configured
      const formData = new FormData();
      formData.append('audio', audioBlob, 'recording.webm');

      const response = await fetch('/.netlify/functions/voice-to-website', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }

      setTranscription(result.transcription);
      setGeneratedCode(result.generatedCode);
      updatePreview(result.generatedCode);
      setStatus('Website generated successfully!');
      
    } catch (error) {
      console.error('Error processing audio:', error);
      setStatus(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Generate website from manual text input
  const generateFromText = async () => {
    if (!manualText.trim()) {
      setStatus('Please enter some text describing the website you want');
      return;
    }

    setLoading(true);
    setStatus('Generating website...');

    try {
      // Check if Google AI API key is available
      const hasApiKey = process.env.REACT_APP_GOOGLE_AI_API_KEY || process.env.GOOGLE_AI_API_KEY;
      
      if (hasApiKey) {
        // Use Google AI for advanced generation
        setStatus('Generating website with AI...');
        const generatedCode = await generateWithAI(manualText);
        setTranscription(manualText);
        setGeneratedCode(generatedCode);
        updatePreview(generatedCode);
        setStatus('Website generated successfully with AI!');
      } else {
        // Fallback to local generation
        await new Promise(resolve => setTimeout(resolve, 2000));
        const generatedCode = generateLocalHTML(manualText);
        setTranscription(manualText);
        setGeneratedCode(generatedCode);
        updatePreview(generatedCode);
        setStatus('Website generated successfully! (Local Mode)');
      }
      
    } catch (error) {
      console.error('Error generating website:', error);
      setStatus(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Update preview iframe
  const updatePreview = (code) => {
    if (previewFrameRef.current && code) {
      console.log('Updating preview with code length:', code.length);
      
      // Clear existing content first
      previewFrameRef.current.srcdoc = '';
      previewFrameRef.current.src = '';
      
      // Set new content using srcdoc (more reliable for HTML)
      setTimeout(() => {
        previewFrameRef.current.srcdoc = code;
      }, 100);
    } else {
      console.log('Preview update failed - ref or code missing:', {
        hasRef: !!previewFrameRef.current,
        hasCode: !!code,
        codeLength: code?.length || 0
      });
    }
  };

  // Download generated code
  const downloadCode = () => {
    if (!generatedCode) return;
    
    const blob = new Blob([generatedCode], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'generated-website.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="voice-website-builder">
      <div className="builder-container">
        {/* Left Panel - Controls */}
        <div className="control-panel">
          <div className="panel-header">
            <h2>🎤 Voice to Website Builder</h2>
            <p className="subtitle">Create websites with your voice or text</p>
          </div>

          <div className="instructions">
            <h3>How to use:</h3>
            <ul>
              <li>🎙️ Click "Start Recording" and describe your website</li>
              <li>⏹️ Click "Stop Recording" when finished</li>
              <li>✏️ Or type your description in the text area below</li>
              <li>⚡ Wait for the AI to generate your website</li>
              <li>👀 View the result in the preview panel</li>
            </ul>
          </div>

          <div className="controls">
            <div className="voice-controls">
              <h4>Voice Input</h4>
              <div className="voice-buttons">
                <button
                  className={`record-btn ${isRecording ? 'recording' : ''}`}
                  onClick={startRecording}
                  disabled={isRecording || loading}
                >
                  {isRecording ? '🔴 Recording...' : '🎤 Start Recording'}
                </button>
                <button
                  className="stop-btn"
                  onClick={stopRecording}
                  disabled={!isRecording || loading}
                >
                  ⏹️ Stop Recording
                </button>
              </div>
            </div>

            <div className="text-input-section">
              <h4>Or Type Your Description</h4>
              <textarea
                value={manualText}
                onChange={(e) => setManualText(e.target.value)}
                placeholder="Describe the website you want to create..."
                rows={4}
                disabled={loading}
              />
              <button
                className="generate-btn"
                onClick={generateFromText}
                disabled={loading || !manualText.trim()}
              >
                🚀 Generate Website
              </button>
            </div>
          </div>

          <div className={`status ${loading ? 'loading' : ''}`}>
            {loading && <div className="spinner"></div>}
            <span>{status}</span>
          </div>

          {generatedCode && transcription && (
            <div className="code-display">
              <h3>📝 Description:</h3>
              <p>{transcription}</p>
            </div>
          )}

          {generatedCode && (
            <div className="actions">
              <button className="download-btn" onClick={downloadCode}>
                💾 Download HTML
              </button>
            </div>
          )}
        </div>

        {/* Right Panel - Preview */}
        <div className="preview-panel">
          <div className="preview-header">
            <div className="tabs">
              <button
                className={`tab ${activeTab === 'preview' ? 'active' : ''}`}
                onClick={() => setActiveTab('preview')}
              >
                👀 Preview
              </button>
              <button
                className={`tab ${activeTab === 'code' ? 'active' : ''}`}
                onClick={() => setActiveTab('code')}
              >
                💻 Code
              </button>
            </div>
          </div>

          <div className="preview-content">
            {activeTab === 'preview' ? (
              <div className="preview-area">
                {generatedCode ? (
                  <iframe
                    ref={previewFrameRef}
                    title="Website Preview"
                    className="preview-iframe"
                  />
                ) : (
                  <div className="no-preview">
                    <div className="placeholder-icon">🌐</div>
                    <h3>No Website Yet</h3>
                    <p>Use voice recording or text input to generate your website</p>
                    <div className="sample-prompts">
                      <p><strong>Try saying:</strong></p>
                      <ul>
                        <li>"Create a portfolio website with dark theme"</li>
                        <li>"Build a restaurant landing page with menu"</li>
                        <li>"Make a blog website with modern design"</li>
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="code-area">
                {generatedCode ? (
                  <pre className="code-preview">
                    <code>{generatedCode}</code>
                  </pre>
                ) : (
                  <div className="no-code">
                    <div className="placeholder-icon">📄</div>
                    <h3>No Code Yet</h3>
                    <p>Generate a website to see the HTML code here</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
